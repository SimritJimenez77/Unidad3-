from tkinter import *
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import mysql.connector

"""def leer_alumnosDB():
    cursor = db.cursor()
    cursor.execute("SELECT * FROM alumnos")
    return cursor.fetchall()"""
"""def MostrarAlumnos():
    for widget in trv.winfo_children():
            widget.destroy()

            # Obtener todos los alumnos
            alumnos = leer_alumnosDB()

        # Mostrar los alumnos en la tabla
            for i in rows:
                 trv.insert('', 'end', values=i)"""
                


# Conectar a la base de datos
try:
    db = mysql.connector.connect(
        host="localhost",
        user="root",
        password="123456789",
        database="escuela"
    )

    cursor = db.cursor()
    

except mysql.connector.Error as e:
    messagebox.showerror("Error de conexión", f"No se pudo conectar a la base de datos: {e}")
    exit()

#Muestra los alumnos en el treeview
def MostrarAlumnos(rows):
    trv.delete(*trv.get_children())
    for i in rows:
        trv.insert('', 'end', values=i)

#Agregar alumnos a la base de datos 
def agregar_alumnoDB(nombre, edad, email):
    try:
        cursor = db.cursor()
        cursor.execute("INSERT INTO alumnos (nombre, edad, email) VALUES (%s, %s, %s)", (nombre, edad, email))
        db.commit()
    except mysql.connector.Error as error:
        messagebox.showerror("Error al agregar el alumno", f"No se pudo agregar el alumno: {error}")
    finally:
        cursor.close()
        
def actualizar_alumnoDB(id, nombre, edad, email):
    iid = int(id)
    cursor = db.cursor()
    print("UPDATE alumnos SET nombre = %s, edad = %s, email = %s WHERE id = %s", (nombre, edad, email, iid))
    cursor.execute("UPDATE alumnos SET nombre = %s, edad = %s, email = %s WHERE id = %s", (nombre, edad, email, iid))
    db.commit()

def eliminar_alumnoDB(id):
    cursor = db.cursor()
    cursor.execute("DELETE FROM alumnos WHERE id = %s", (id,))
    db.commit()

#Metodo para que agregue el usuario a la tabla de la base de datos 
def agregar_alumno():
    # Obtener los datos del nuevo alumno
    nombre = entrada_nombre.get()
    edad = entrada_edad.get()
    email = entrada_email.get()

    # Validar que los campos no estén vacíos
    if not nombre or not edad or not email:
        messagebox.showerror("Error al agregar el alumno", "Por favor ingrese todos los datos del alumno")
        return

    # Agregar el nuevo alumno
    agregar_alumnoDB(nombre, edad, email)

    # Limpiar los campos de entrada

    entrada_nombre.delete(0, END)
    entrada_edad.delete(0, END)
    entrada_email.delete(0, END)

    # Mostrar la lista actualizada de alumnos
    MostrarAlumnos()



# Función para eliminar un alumno existente
def eliminar_alumno():
    # Obtener el ID del alumno a eliminar
    id = entrada_id.get()

    # Validar que se haya ingresado un ID
    if not id:
        messagebox.showerror("Error al eliminar el alumno", "Por favor ingrese el ID del alumno a eliminar")
        return

    # Preguntar al usuario si está seguro de eliminar el alumno
    confirmar = messagebox.askyesno("Confirmar eliminación", "¿Está seguro de eliminar este alumno?")

    if confirmar:
        # Eliminar el alumno
        eliminar_alumnoDB(id)

        # Limpiar los campos de entrada
        entrada_id.delete(0, END)
        entrada_nombre.delete(0, END)
        entrada_edad.delete(0, END)
        entrada_email.delete(0, END)

        # Mostrar la lista actualizada de alumnos
        MostrarAlumnos()

def actualizar_alumno():
    # Obtener los datos del alumno a actualizar
    nombre = entrada_nombre.get()
    edad = entrada_edad.get()
    email = entrada_email.get()
    id = entrada_id.get()

    # Validar que los campos no estén vacíos
    if not id or not nombre or not edad or not email:
        messagebox.showerror("Error al actualizar el alumno", "Por favor ingrese todos los datos del alumno")
        return

    # Actualizar el alumno
    actualizar_alumnoDB(id, nombre, edad, email)

    # Limpiar los campos de entrada
    entrada_id.delete(0, END)
    entrada_nombre.delete(0, END)
    entrada_edad.delete(0, END)
    entrada_email.delete(0, END)

    # Mostrar la lista actualizada de alumnos
    MostrarAlumnos()


# Función para eliminar un alumno existente
def eliminar_alumno():
    # Obtener el ID del alumno a eliminar
    id = entrada_id.get()

    # Validar que se haya ingresado un ID
    if not id:
        messagebox.showerror("Error al eliminar el alumno", "Por favor ingrese el ID del alumno a eliminar")
        return

    # Preguntar al usuario si está seguro de eliminar el alumno
    confirmar = messagebox.askyesno("Confirmar eliminación", "¿Está seguro de eliminar este alumno?")

    if confirmar:
        # Eliminar el alumno
        eliminar_alumnoDB(id)

        # Limpiar los campos de entrada
        entrada_id.delete(0, END)
        entrada_nombre.delete(0, END)
        entrada_edad.delete(0, END)
        entrada_email.delete(0, END)

        # Mostrar la lista actualizada de alumnos
        MostrarAlumnos()

#limpia los campos
def Limpiar_campos():
    
    entrada_id.delete(0, END)
    entrada_nombre.delete(0, END)
    entrada_edad.delete(0, END)
    entrada_email.delete(0, END)

#Consultar alumnos registrados a la base de datos

def consultar():
    id = entrada_id.get()
    cursor = db.cursor()
    cursor.execute("SELECT * FROM alumnos WHERE id = %s", (id,))
    rows = cursor.fetchone()
    db.commit()

    #nombre = entrada_nombre.get()
   


 


def Actualizar_table():
    query = "SELECT * FROM alumnos"
    cursor.execute(query)
    rows = cursor.fetchall()
    MostrarAlumnos(rows)




#Ventana de python
root = Tk()

root.title("Aplicacion python")
root.geometry("800x500")
root.config(bg='silver')

frame1 = LabelFrame(root, text="Datos del Alumno" , font=('Arial' , 14))
frame2 = LabelFrame(root, text="Consultar registros" , font=('Arial' , 14))
frame3 = LabelFrame(root, text="Lista de alumnos en la base de datos" , font=('Arial' , 14))

frame1.pack(fill = "both" , expand = "yes" , padx = 20, pady = 10)
frame2.pack(fill = "both" , expand = "yes" , padx = 20, pady = 10)
frame3.pack(fill = "both" , expand = "yes" , padx = 20, pady = 10)

trv = ttk.Treeview(frame3, columns=(0,1,2,3) , show="headings" , height = "10")
trv.pack()

trv.heading(0, text = "Id")
trv.heading(1, text="Nombre")
trv.heading(2, text="Edad ")
trv.heading(3, text="E-mail")

#Lista los registros en el treeview
query = ("SELECT * FROM alumnos")    
cursor.execute(query)        
rows = cursor.fetchall()
MostrarAlumnos(rows)

lbl = Label(frame2 , text="Consulta")
lbl.pack(side=tk.LEFT, padx=10)

ent = Entry(frame2)
ent.pack(side=tk.LEFT, padx=6)

btn = Button(frame2, width = 10, text="Consultar", command=consultar).pack(side=tk.LEFT, padx=6)
btn2 = Button(frame2, width = 10, text= "Limpiar", command=Actualizar_table).pack(side=tk.LEFT, padx=6)

lbl1 = Label(frame1, text="Id")
lbl1.grid(column = 0, row = 0, padx = 5, pady = 3)
entrada_id = Entry(frame1)
entrada_id.grid(column = 1, row = 0 , padx = 5 , pady = 3)

lbl1 = Label(frame1, text="Nombre")
lbl1.grid(column = 0, row = 1, padx = 5, pady = 3)
entrada_nombre = Entry(frame1)
entrada_nombre.grid(column = 1, row = 1 , padx = 5 , pady = 3)

lbl1 = Label(frame1, text="Edad")
lbl1.grid(column = 0, row = 2, padx = 5, pady = 3)
entrada_edad= Entry(frame1)
entrada_edad.grid(column = 1, row = 2 , padx = 5 , pady = 3)

lbl1 = Label(frame1, text="E-mail")
lbl1.grid(column = 0, row = 3, padx = 5, pady = 3)
entrada_email = Entry(frame1)
entrada_email.grid(column = 1, row = 3 , padx = 5 , pady = 3)

#Funciones del boton
agregar_btn = Button(frame1 , width = 10, text="Agregar", command=agregar_alumno).grid(column = 0 , row = 4 , padx = 5 , pady = 3)
actualizar_btn = Button(frame1 , width = 10, text="Actualizar", command = actualizar_alumno).grid(column = 1 , row = 4 , padx = 5 , pady = 3)
eliminar_btn = Button(frame1 , width = 10, text="Eliminar", command= eliminar_alumno).grid(column = 2, row = 4 , padx = 5 , pady = 3)
limpiar_btn = Button(frame1, width = 10, text="Limpiar", command = Limpiar_campos).grid(column = 3, row = 4 , padx = 25 , pady = 3)
#Mostrar_btn = Button(frame1, width = 10, text="Mostrar").grid(column = 4, row = 4 , padx = 10 , pady = 3)


root.mainloop()


  
